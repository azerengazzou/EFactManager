// <auto-generated />
using System;
using EFactManagerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFactManagerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230411011124_InitMigrationBD")]
    partial class InitMigrationBD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFactManagerAPI.Models.FieldEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("messageId")
                        .HasColumnType("int");

                    b.Property<int>("recordId")
                        .HasColumnType("int");

                    b.Property<int>("zoneContentId")
                        .HasColumnType("int");

                    b.Property<int>("zoneId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("messageId");

                    b.HasIndex("recordId");

                    b.HasIndex("zoneContentId");

                    b.HasIndex("zoneId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.FileEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileUploadedContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("size")
                        .HasColumnType("real");

                    b.Property<DateTime>("update_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("upload_date")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Description = "Test",
                            fileName = "Test File",
                            fileUploadedContent = "testtes",
                            size = 1.5f,
                            update_date = new DateTime(2023, 4, 11, 2, 11, 24, 586, DateTimeKind.Local).AddTicks(1469),
                            upload_date = new DateTime(2023, 4, 11, 2, 11, 24, 586, DateTimeKind.Local).AddTicks(1481)
                        });
                });

            modelBuilder.Entity("EFactManagerAPI.Models.MessageEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("messageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.RecordEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("recordLength")
                        .HasColumnType("int");

                    b.Property<string>("recordPlacement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("recordType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.ZoneContentEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("ZoneContents");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.ZoneEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isError")
                        .HasColumnType("bit");

                    b.Property<int>("startPosition")
                        .HasColumnType("int");

                    b.Property<string>("zoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zonelength")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.FieldEntity", b =>
                {
                    b.HasOne("EFactManagerAPI.Models.MessageEntity", "Message")
                        .WithMany("Fields")
                        .HasForeignKey("messageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFactManagerAPI.Models.RecordEntity", "Record")
                        .WithMany("Fields")
                        .HasForeignKey("recordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFactManagerAPI.Models.ZoneContentEntity", "ZoneContent")
                        .WithMany("Fields")
                        .HasForeignKey("zoneContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFactManagerAPI.Models.ZoneEntity", "Zone")
                        .WithMany("Fields")
                        .HasForeignKey("zoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Record");

                    b.Navigation("Zone");

                    b.Navigation("ZoneContent");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.MessageEntity", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.RecordEntity", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.ZoneContentEntity", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("EFactManagerAPI.Models.ZoneEntity", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
